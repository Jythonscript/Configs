# Document
snippet beg "Begin" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet s "Section" b
\\section{$1}
$0
endsnippet

snippet sn "Section*" b
\\section*{$1}
$0
endsnippet

snippet pleaseinsertasectionatthislocationwheremycursoriswithoutastarwhichmeansnonumbersandnotableofcontentsplease "snippet" iA
\\section*{$1}
$0
endsnippet

snippet ss "Subsection" b
\\subsection{$1}
$0
endsnippet

snippet ssn "Subsection*" b
\\subsection*{$1}
$0
endsnippet

snippet sss "Subsubsection" b
\\subsubsection{$1}
$0
endsnippet

snippet sssn "Subsubsection*" b
\\subsubsection*{$1}
$0
endsnippet

# Text
snippet bf "Boldface" w
\\textbf{$1}$0
endsnippet

snippet it "Italicize" w
\\textit{$1}$0
endsnippet

snippet ul "Underline" w
\\underline{$1}$0
endsnippet

# Math

## Context
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

## Tags
snippet dm "Math" bA
\\[
	$1
\\] $0
endsnippet

snippet adm "Align Math" bA
\\begin{align*}
	$0
\\end{align*}
endsnippet

snippet im "Math" w
\$$1\$$0
endsnippet

snippet mk "Math" wA
\$$1\$$0
endsnippet

context "math()"
snippet txt "Text" iA
\\text{$1}$0
endsnippet

snippet item "itemize" bA
\\begin{itemize}
	\\item $0
\\end{itemize}
endsnippet

snippet enum "enumerate" bA
\\begin{enumerate}
	\\item $0
\\end{enumerate}
endsnippet

## Operations and Equations
context "math()"
snippet == "Align Equals" iA
&=$0
endsnippet

context "math()"
snippet ^^ "Exponent" iA
^{$1}$0
endsnippet

context "math()"
snippet td "Exponent" iA
^{$1}$0
endsnippet

context "math()"
snippet sb "Subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet __ "Subscript" iA
_{$1}$0
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp|Delta|delta|phi)' "ln" rwA
\\`!p snip.rv = match.group(1) + " "`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int|oint)' "Functions" rwA
\\`!p snip.rv = match.group(1) + " "`
endsnippet

context "math()"
snippet sqrt "Square root" iA
\\sqrt{$1}$0
endsnippet

context "math()"
snippet sd "Squared" iA
^2
endsnippet

context "math()"
snippet cbd "Cubed" iA
^3
endsnippet

context "math()"
snippet ** "Dot product" iA
\\cdot $0
endsnippet

context "math()"
snippet xx "Cross product" iA
\\times $0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

## Postfix and prefix
context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\\vec{`!p snip.rv=match.group(1)`}
endsnippet 

context "math()"
priority 10
snippet "hat" "hat" riA
\\hat{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "bar" "bar" riA
\\overline{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\\overline{`!p snip.rv=match.group(1)`}
endsnippet

## Special characters
context "math()"
priority 101
snippet '(?<!\\)(pi|mu|theta|omega)' "Special characters" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet '(?<!\\)(eps)' "epsilon" riA
\\varepsilon 
endsnippet

context "math()"
snippet '(?<!\\)(Eps)' "Epsilon" riA
\\mathcal{E} 
endsnippet

context "math()"
snippet '(?<!\\)(part)' "Partial derivative" riA
\\partial 
endsnippet

context "math()"
snippet '(\(|\[|\\{)' "Big grouping characters" ri
\\left`!p snip.rv=match.group(0)` $1 \\right`!p 
dict = {
"(": ")",
"[": "]",
"\{": "\}"
}
snip.rv = dict[match.group(0)]
` $0
endsnippet

snippet box "Box" i
\\boxed{${VISUAL}}$0
endsnippet

context "math()"
snippet inf "Infinity" i
\\infty
endsnippet

context "math()"
snippet oc "Proportional to" i
\\propto
endsnippet

context "math()"
snippet ~= "Approximate" iA
\\approx
endsnippet

context "math()"
snippet ~~ "Proportional to" iA
\\sim
endsnippet

## Graphics
snippet table "Table" w
\\begin{table}[H]
	\\begin{center}
		\\begin{tabular}{c|c}
			\\textbf{${1:Var x}} & \\textbf{${2:Var y}} \\\\
			${3:Units x} & ${4:Units y} \\\\
			\\hline
			${5:data 1} & ${0:data 2}
		\\end{tabular}
	\\end{center}
\\end{table}
endsnippet
